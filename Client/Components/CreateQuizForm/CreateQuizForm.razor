@using Client.Components.ResultPopup

@inject IDataService _dataService
@inject IModalService _modalService

<div class="container">
	<EditForm Model="creationQuizData" OnValidSubmit="HandleValidSubmit" class="form">
		<DataAnnotationsValidator />
		<div class="input">
			<label>Wybierz poziom zaawansowania quizu</label>
			<InputSelect @bind-Value="creationQuizData.AdvanceNumber">
				<option value="1">1</option>
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
				<option value="7">7</option>
				<option value="8">8</option>
				<option value="9">9</option>
				<option value="10">10</option>
			</InputSelect>
		</div>
		<div class="input">
			<label>Wpisz technologię quizu</label>
			<InputText @bind-Value="creationQuizData.TechnologyName" />
		</div>
		<div class="input">
			<label>Podaj tytuł quizu</label>
			<InputText @bind-Value="creationQuizData.QuizTitle" />
		</div>
		<ValidationSummary />
		<Button Content="Stwórz" IsSubmit=true />
	</EditForm>
</div>
@if (IsLoading)
{
	<Loading />
}

@code {

	[CascadingParameter] 
	BlazoredModalInstance BlazoredModal { get; set; } = default!;

	public CreationQuizDataModel creationQuizData = new();
	private bool IsLoading { get; set; } = false;

	private async Task CloseModal() => await BlazoredModal.CloseAsync();

	public async Task HandleValidSubmit()
	{
		IsLoading = true;

		var result = await _dataService.SendCreateUserQuizRequestAsync(creationQuizData);

		IsLoading = false;

		await CloseModal();

		string modalMessage = result switch
		{
			true => "Quiz w kolejce do stworzenia!",
			false => "Coś poszło nie tak"
		};

		var parameters = new ModalParameters()
			.Add(nameof(ResultPopup.Message), modalMessage)
			.Add(nameof(ResultPopup.IsSucces), result);

		_modalService.Show<ResultPopup>(parameters , ModalOptionsHelper.GetForResultPopup());
	}
}
