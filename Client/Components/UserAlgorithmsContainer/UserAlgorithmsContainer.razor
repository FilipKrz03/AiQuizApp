@using Client.Components.AlgorithmsContainer
@using Client.Components.CreateAlgorithmForm
@using Client.Components.NotCreatedAlgorithmsContainer

@inject IModalService _modalService;
@inject IDataService _dataService;

@if (!IsLoading)
{
	<div class="container">
		<button 
			class="toggle-btn"
			@onclick='ToggleShowNotCreatedAlgorithmsState'>
			@GetToggleButtonContent()
			</button>
		<div class="main-info">
			@if (!ShowNotCreatedAlgorithms)
			{
				<p>
					Stworzyłeś
					<span class="bolder-font">
						@Algorithms.Count() algorytm@(GetAlgorithmsWordSufix(Algorithms.Count())) !
					</span>
				</p>
			}
			@if (ShowNotCreatedAlgorithms)
			{
				@if (NotCreatedAlgorithms.Count() == 0)
				{
					<p>Żadne algorytmy nie czekają w kolejce !</p>
				}
				@if (NotCreatedAlgorithms.Count() > 0)
				{
					<p>
						Nie stworzono jeszcze
						<span class="bolder-font">
							@NotCreatedAlgorithms.Count() algorytm@(GetAlgorithmsWordSufix(NotCreatedAlgorithms.Count())) !
						</span>
					</p>
				}
			}
			<Button Content="Stwórz algorytm" Secondary=true OnClickCallback="ShowCreateAlgorithmModal"/>
		</div>
		@if(!ShowNotCreatedAlgorithms)
		{
			<AlgorithmsContainer Algorithms="Algorithms" AreAlgorithmsLimitedToUser="true" />
		}
		@if(ShowNotCreatedAlgorithms)
		{
			<NotCreatedAlgorithmsContainer Algorithms="NotCreatedAlgorithms" />
		}
	</div>
}
@if(IsLoading)
{
	<Loading />
}

@code {
	public IEnumerable<AlgorithmTaskBasicResponseDto> Algorithms { get; set; } = [];
	public IEnumerable<UserOwnAlgorithmTaskBasicResponseDto> NotCreatedAlgorithms = [];

	public bool IsLoading { get; set; } = false;

	public bool ShowNotCreatedAlgorithms { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		IsLoading = true;

		var result = await _dataService.GetUserAlgorithmsAsync();
		Algorithms = result;

		IsLoading = false;
	}

	private void ShowCreateAlgorithmModal()
	{
		var modal = _modalService.Show<CreateAlgorithmForm>("Stwórz algorytm !");
	}

	private string GetAlgorithmsWordSufix(int algorithmsCount)
	{
		if (algorithmsCount == 1) return "u";
		if (algorithmsCount > 1 && algorithmsCount < 5) return "y";

		return "ów";
	}

	private async Task ToggleShowNotCreatedAlgorithmsState()
	{
		ShowNotCreatedAlgorithms = !ShowNotCreatedAlgorithms;
		IsLoading = true;

		if(ShowNotCreatedAlgorithms)
		{
			NotCreatedAlgorithms = await _dataService.GetUserNotCreatedAlgorithmsAsync();
		}
		else
		{
			Algorithms = await _dataService.GetUserAlgorithmsAsync();
		}

		IsLoading = false;
	}

	private string GetToggleButtonContent()
	{
		return ShowNotCreatedAlgorithms == false ? "Pokaż (jeszcze?) nie stworzone algorytmy" : "Pokaż stworzone algorytmy";
	}
}
